{"remainingRequest":"/home/user1/桌面/vue/D2AdminICE-master/node_modules/babel-loader/lib/index.js!/home/user1/桌面/vue/D2AdminICE-master/node_modules/eslint-loader/index.js??ref--13-0!/home/user1/桌面/vue/D2AdminICE-master/src/store/modules/d2admin/modules/account.js","dependencies":[{"path":"/home/user1/桌面/vue/D2AdminICE-master/src/store/modules/d2admin/modules/account.js","mtime":1557910292529},{"path":"/home/user1/桌面/vue/D2AdminICE-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user1/桌面/vue/D2AdminICE-master/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/user1/桌面/vue/D2AdminICE-master/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/user1/\\u684C\\u9762/vue/D2AdminICE-master/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport util from '@/libs/util.js';\nimport { AccountLogin, GetUser, GetAllUser as _GetAllUser, UserCreate, UserUpdate, UserDelete } from '@/api/sys/login'; //引入login API\n\nexport default {\n  namespaced: true,\n  actions: {\n    /**\n     * @description 登录\n     * @param {Object} param context\n     * @param {Object} param vm {Object} vue 实例\n     * @param {Object} param username {String} 用户账号\n     * @param {Object} param password {String} 密码\n     * @param {Object} param route {Object} 登录成功后定向的路由对象\n     */\n    login: function login(_ref, _ref2) {\n      var dispatch = _ref.dispatch;\n      var vm = _ref2.vm,\n          usernameOrEmailAddress = _ref2.usernameOrEmailAddress,\n          password = _ref2.password,\n          _ref2$route = _ref2.route,\n          route = _ref2$route === void 0 ? {\n        name: 'index'\n      } : _ref2$route;\n      // 开始请求登录接口\n      AccountLogin({\n        usernameOrEmailAddress: usernameOrEmailAddress,\n        password: password\n      }).then(\n      /*#__PURE__*/\n      function () {\n        var _ref3 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee2(res) {\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  // 设置 cookie 一定要存 uuid 和 token 两个 cookie\n                  // 整个系统依赖这两个数据进行校验和存储\n                  // uuid 是用户身份唯一标识 用户注册的时候确定 并且不可改变 不可重复\n                  // token 代表用户当前登录状态 建议在网络请求中携带 token\n                  // 如有必要 token 需要定时更新，默认保存一天\n                  util.cookies.set('uuid', res.result.userId);\n                  util.cookies.set('token', res.result.accessToken); // 设置 vuex 用户信息          \n\n                  GetUser({\n                    Id: res.result.userId\n                  }).then(\n                  /*#__PURE__*/\n                  function () {\n                    var _ref4 = _asyncToGenerator(\n                    /*#__PURE__*/\n                    regeneratorRuntime.mark(function _callee(res) {\n                      var path;\n                      return regeneratorRuntime.wrap(function _callee$(_context) {\n                        while (1) {\n                          switch (_context.prev = _context.next) {\n                            case 0:\n                              _context.next = 2;\n                              return dispatch('d2admin/user/set', {\n                                name: res.result.userName\n                              }, {\n                                root: true\n                              });\n\n                            case 2:\n                              _context.next = 4;\n                              return dispatch('load');\n\n                            case 4:\n                              // 更新路由 尝试去获取 cookie 里保存的需要重定向的页面完整地址\n                              path = util.cookies.get('redirect'); // 根据是否存有重定向页面判断如何重定向\n\n                              vm.$router.replace(path ? {\n                                path: path\n                              } : route); // 删除 cookie 中保存的重定向页面\n\n                              util.cookies.remove('redirect');\n\n                            case 7:\n                            case \"end\":\n                              return _context.stop();\n                          }\n                        }\n                      }, _callee);\n                    }));\n\n                    return function (_x2) {\n                      return _ref4.apply(this, arguments);\n                    };\n                  }()).catch(function (err) {\n                    console.log('err: ', err);\n                  });\n\n                case 3:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x) {\n          return _ref3.apply(this, arguments);\n        };\n      }()).catch(function (err) {\n        console.log('err: ', err);\n      });\n    },\n    GetAllUser: function GetAllUser(vm, data) {\n      return _GetAllUser(data);\n    },\n    UserCreateOrUpdate: function UserCreateOrUpdate(vm, data) {\n      if (data.id == 0 || data.id == null) return UserCreate(data);else return UserUpdate(data);\n    },\n    UserDel: function UserDel(vm, data) {\n      return UserDelete(data);\n    },\n\n    /**\n     * @description 注销用户并返回登录页面\n     * @param {Object} param context\n     * @param {Object} param vm {Object} vue 实例\n     * @param {Object} param confirm {Boolean} 是否需要确认\n     */\n    logout: function logout(_ref5, _ref6) {\n      var commit = _ref5.commit;\n      var vm = _ref6.vm,\n          _ref6$confirm = _ref6.confirm,\n          confirm = _ref6$confirm === void 0 ? false : _ref6$confirm;\n\n      /**\n       * @description 注销\n       */\n      function logout() {\n        // 删除cookie\n        util.cookies.remove('token');\n        util.cookies.remove('uuid'); // 跳转路由\n\n        vm.$router.push({\n          name: 'login'\n        });\n      } // 判断是否需要确认\n\n\n      if (confirm) {\n        commit('d2admin/gray/set', true, {\n          root: true\n        });\n        vm.$confirm('注销当前账户吗?  打开的标签页和用户设置将会被保存。', '确认操作', {\n          confirmButtonText: '确定注销',\n          cancelButtonText: '放弃',\n          type: 'warning'\n        }).then(function () {\n          commit('d2admin/gray/set', false, {\n            root: true\n          });\n          logout();\n        }).catch(function () {\n          commit('d2admin/gray/set', false, {\n            root: true\n          });\n          vm.$message('放弃注销用户');\n        });\n      } else {\n        logout();\n      }\n    },\n\n    /**\n     * @description 用户登录后从持久化数据加载一系列的设置\n     * @param {Object} state vuex state\n     */\n    load: function load(_ref7) {\n      var commit = _ref7.commit,\n          dispatch = _ref7.dispatch;\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref8 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee3(resolve) {\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return dispatch('d2admin/user/load', null, {\n                    root: true\n                  });\n\n                case 2:\n                  _context3.next = 4;\n                  return dispatch('d2admin/theme/load', null, {\n                    root: true\n                  });\n\n                case 4:\n                  _context3.next = 6;\n                  return dispatch('d2admin/transition/load', null, {\n                    root: true\n                  });\n\n                case 6:\n                  _context3.next = 8;\n                  return dispatch('d2admin/page/openedLoad', null, {\n                    root: true\n                  });\n\n                case 8:\n                  _context3.next = 10;\n                  return dispatch('d2admin/menu/asideCollapseLoad', null, {\n                    root: true\n                  });\n\n                case 10:\n                  _context3.next = 12;\n                  return dispatch('d2admin/size/load', null, {\n                    root: true\n                  });\n\n                case 12:\n                  // end\n                  resolve();\n\n                case 13:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x3) {\n          return _ref8.apply(this, arguments);\n        };\n      }());\n    }\n  }\n};",{"version":3,"sources":["/home/user1/桌面/vue/D2AdminICE-master/src/store/modules/d2admin/modules/account.js"],"names":["util","AccountLogin","GetUser","GetAllUser","UserCreate","UserUpdate","UserDelete","namespaced","actions","login","dispatch","vm","usernameOrEmailAddress","password","route","name","then","res","cookies","set","result","userId","accessToken","Id","userName","root","path","get","$router","replace","remove","catch","err","console","log","data","UserCreateOrUpdate","id","UserDel","logout","commit","confirm","push","$confirm","confirmButtonText","cancelButtonText","type","$message","load","Promise","resolve"],"mappings":"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","sourcesContent":["import util from '@/libs/util.js'\nimport { AccountLogin,GetUser,GetAllUser,UserCreate,UserUpdate,UserDelete } from '@/api/sys/login'  //引入login API\n\nexport default {\n  namespaced: true,\n  actions: {\n    /**\n     * @description 登录\n     * @param {Object} param context\n     * @param {Object} param vm {Object} vue 实例\n     * @param {Object} param username {String} 用户账号\n     * @param {Object} param password {String} 密码\n     * @param {Object} param route {Object} 登录成功后定向的路由对象\n     */\n    login ({ dispatch }, {\n      vm,\n      usernameOrEmailAddress,\n      password,\n      route = {\n        name: 'index'\n      }\n    }) {\n      // 开始请求登录接口\n      AccountLogin({\n        usernameOrEmailAddress,\n        password\n      })\n        .then(async res => {\n          // 设置 cookie 一定要存 uuid 和 token 两个 cookie\n          // 整个系统依赖这两个数据进行校验和存储\n          // uuid 是用户身份唯一标识 用户注册的时候确定 并且不可改变 不可重复\n          // token 代表用户当前登录状态 建议在网络请求中携带 token\n          // 如有必要 token 需要定时更新，默认保存一天\n          util.cookies.set('uuid', res.result.userId)\n          util.cookies.set('token', res.result.accessToken)\n          \n          // 设置 vuex 用户信息          \n          GetUser({Id:res.result.userId}).then(async res =>{\n            await dispatch('d2admin/user/set', {\n              name: res.result.userName\n            }, { root: true })\n            \n            // 用户登录后从持久化数据加载一系列的设置\n            await dispatch('load')\n            // 更新路由 尝试去获取 cookie 里保存的需要重定向的页面完整地址\n            const path = util.cookies.get('redirect')\n            // 根据是否存有重定向页面判断如何重定向\n            vm.$router.replace(path ? { path } : route)\n            // 删除 cookie 中保存的重定向页面\n            util.cookies.remove('redirect')\n\n          }).catch(err => {\n            console.log('err: ', err)\n          })\n        })\n        .catch(err => {\n          console.log('err: ', err)\n        })        \n    },\n    GetAllUser(vm, data){                     \n      return GetAllUser(data)\n    },\n    UserCreateOrUpdate(vm, data){   \n      if(data.id == 0 || data.id == null)                \n        return UserCreate(data)\n      else\n        return UserUpdate(data)\n    },\n    UserDel(vm,data){\n      return UserDelete(data)\n    },\n    /**\n     * @description 注销用户并返回登录页面\n     * @param {Object} param context\n     * @param {Object} param vm {Object} vue 实例\n     * @param {Object} param confirm {Boolean} 是否需要确认\n     */\n    logout ({ commit }, { vm, confirm = false }) {\n      /**\n       * @description 注销\n       */\n      function logout () {\n        // 删除cookie\n        util.cookies.remove('token')\n        util.cookies.remove('uuid')\n        // 跳转路由\n        vm.$router.push({\n          name: 'login'\n        })\n      }\n      // 判断是否需要确认\n      if (confirm) {\n        commit('d2admin/gray/set', true, { root: true })\n        vm.$confirm('注销当前账户吗?  打开的标签页和用户设置将会被保存。', '确认操作', {\n          confirmButtonText: '确定注销',\n          cancelButtonText: '放弃',\n          type: 'warning'\n        })\n          .then(() => {\n            commit('d2admin/gray/set', false, { root: true })\n            logout()\n          })\n          .catch(() => {\n            commit('d2admin/gray/set', false, { root: true })\n            vm.$message('放弃注销用户')\n          })\n      } else {\n        logout()\n      }\n    },\n    /**\n     * @description 用户登录后从持久化数据加载一系列的设置\n     * @param {Object} state vuex state\n     */\n    load ({ commit, dispatch }) {\n      return new Promise(async resolve => {\n        // DB -> store 加载用户名\n        await dispatch('d2admin/user/load', null, { root: true })\n        // DB -> store 加载主题\n        await dispatch('d2admin/theme/load', null, { root: true })\n        // DB -> store 加载页面过渡效果设置\n        await dispatch('d2admin/transition/load', null, { root: true })\n        // DB -> store 持久化数据加载上次退出时的多页列表\n        await dispatch('d2admin/page/openedLoad', null, { root: true })\n        // DB -> store 持久化数据加载侧边栏折叠状态\n        await dispatch('d2admin/menu/asideCollapseLoad', null, { root: true })\n        // DB -> store 持久化数据加载全局尺寸\n        await dispatch('d2admin/size/load', null, { root: true })\n        // end\n        resolve()\n      })\n    }\n  }\n}\n"]}]}