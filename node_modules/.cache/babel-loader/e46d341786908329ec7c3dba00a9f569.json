{"remainingRequest":"/home/user1/桌面/vue/D2AdminICE-master/node_modules/babel-loader/lib/index.js!/home/user1/桌面/vue/D2AdminICE-master/node_modules/eslint-loader/index.js??ref--13-0!/home/user1/桌面/vue/D2AdminICE-master/src/store/modules/d2admin/modules/db.js","dependencies":[{"path":"/home/user1/桌面/vue/D2AdminICE-master/src/store/modules/d2admin/modules/db.js","mtime":1557910292529},{"path":"/home/user1/桌面/vue/D2AdminICE-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user1/桌面/vue/D2AdminICE-master/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/user1/桌面/vue/D2AdminICE-master/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import db from '@/libs/db.js';\nimport util from '@/libs/util.js';\n/**\n * @description 检查路径是否存在 不存在的话初始化\n * @param {Object} param dbName {String} 数据库名称\n * @param {Object} param path {String} 路径\n * @param {Object} param user {Boolean} 区分用户\n * @param {Object} param validator {Function} 数据校验钩子 返回 true 表示验证通过\n * @param {Object} param defaultValue {*} 初始化默认值\n * @returns {String} 可以直接使用的路径\n */\n\nfunction pathInit(_ref) {\n  var _ref$dbName = _ref.dbName,\n      dbName = _ref$dbName === void 0 ? 'database' : _ref$dbName,\n      _ref$path = _ref.path,\n      path = _ref$path === void 0 ? '' : _ref$path,\n      _ref$user = _ref.user,\n      user = _ref$user === void 0 ? true : _ref$user,\n      _ref$validator = _ref.validator,\n      validator = _ref$validator === void 0 ? function () {\n    return true;\n  } : _ref$validator,\n      _ref$defaultValue = _ref.defaultValue,\n      defaultValue = _ref$defaultValue === void 0 ? '' : _ref$defaultValue;\n  var uuid = util.cookies.get('uuid') || 'ghost-uuid';\n  var currentPath = \"\".concat(dbName, \".\").concat(user ? \"user.\".concat(uuid) : 'public').concat(path ? \".\".concat(path) : '');\n  var value = db.get(currentPath).value();\n\n  if (!(value !== undefined && validator(value))) {\n    db.set(currentPath, defaultValue).write();\n  }\n\n  return currentPath;\n}\n\nexport default {\n  namespaced: true,\n  actions: {\n    /**\n     * @description 将数据存储到指定位置 | 路径不存在会自动初始化\n     * @description 效果类似于取值 dbName.path = value\n     * @param {Object} param dbName {String} 数据库名称\n     * @param {Object} param path {String} 存储路径\n     * @param {Object} param value {*} 需要存储的值\n     * @param {Object} param user {Boolean} 是否区分用户\n     */\n    set: function set(context, _ref2) {\n      var _ref2$dbName = _ref2.dbName,\n          dbName = _ref2$dbName === void 0 ? 'database' : _ref2$dbName,\n          _ref2$path = _ref2.path,\n          path = _ref2$path === void 0 ? '' : _ref2$path,\n          _ref2$value = _ref2.value,\n          value = _ref2$value === void 0 ? '' : _ref2$value,\n          _ref2$user = _ref2.user,\n          user = _ref2$user === void 0 ? false : _ref2$user;\n      db.set(pathInit({\n        dbName: dbName,\n        path: path,\n        user: user\n      }), value).write();\n    },\n\n    /**\n     * @description 获取数据\n     * @description 效果类似于取值 dbName.path || defaultValue\n     * @param {Object} param dbName {String} 数据库名称\n     * @param {Object} param path {String} 存储路径\n     * @param {Object} param defaultValue {*} 取值失败的默认值\n     * @param {Object} param user {Boolean} 是否区分用户\n     */\n    get: function get(context, _ref3) {\n      var _ref3$dbName = _ref3.dbName,\n          dbName = _ref3$dbName === void 0 ? 'database' : _ref3$dbName,\n          _ref3$path = _ref3.path,\n          path = _ref3$path === void 0 ? '' : _ref3$path,\n          _ref3$defaultValue = _ref3.defaultValue,\n          defaultValue = _ref3$defaultValue === void 0 ? '' : _ref3$defaultValue,\n          _ref3$user = _ref3.user,\n          user = _ref3$user === void 0 ? false : _ref3$user;\n      return new Promise(function (resolve) {\n        resolve(db.get(pathInit({\n          dbName: dbName,\n          path: path,\n          user: user,\n          defaultValue: defaultValue\n        })).value());\n      });\n    },\n\n    /**\n     * @description 获取存储数据库对象\n     * @param {Object} context context\n     * @param {Object} param user {Boolean} 是否区分用户\n     */\n    database: function database(context) {\n      var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref4$user = _ref4.user,\n          user = _ref4$user === void 0 ? false : _ref4$user;\n\n      return new Promise(function (resolve) {\n        resolve(db.get(pathInit({\n          dbName: 'database',\n          path: '',\n          user: user,\n          defaultValue: {}\n        })));\n      });\n    },\n\n    /**\n     * @description 清空存储数据库对象\n     * @param {Object} context context\n     * @param {Object} param user {Boolean} 是否区分用户\n     */\n    databaseClear: function databaseClear(context) {\n      var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref5$user = _ref5.user,\n          user = _ref5$user === void 0 ? false : _ref5$user;\n\n      return new Promise(function (resolve) {\n        resolve(db.get(pathInit({\n          dbName: 'database',\n          path: '',\n          user: user,\n          validator: function validator() {\n            return false;\n          },\n          defaultValue: {}\n        })));\n      });\n    },\n\n    /**\n     * @description 获取存储数据库对象 [ 区分页面 ]\n     * @param {Object} context context\n     * @param {Object} param vm {Object} vue\n     * @param {Object} param basis {String} 页面区分依据 [ name | path | fullPath ]\n     * @param {Object} param user {Boolean} 是否区分用户\n     */\n    databasePage: function databasePage(context) {\n      var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          vm = _ref6.vm,\n          _ref6$basis = _ref6.basis,\n          basis = _ref6$basis === void 0 ? 'name' : _ref6$basis,\n          _ref6$user = _ref6.user,\n          user = _ref6$user === void 0 ? false : _ref6$user;\n\n      return new Promise(function (resolve) {\n        resolve(db.get(pathInit({\n          dbName: 'database',\n          path: \"$page.\".concat(vm.$route[basis]),\n          user: user,\n          defaultValue: {}\n        })));\n      });\n    },\n\n    /**\n     * @description 清空存储数据库对象 [ 区分页面 ]\n     * @param {Object} context context\n     * @param {Object} param vm {Object} vue\n     * @param {Object} param basis {String} 页面区分依据 [ name | path | fullPath ]\n     * @param {Object} param user {Boolean} 是否区分用户\n     */\n    databasePageClear: function databasePageClear(context) {\n      var _ref7 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          vm = _ref7.vm,\n          _ref7$basis = _ref7.basis,\n          basis = _ref7$basis === void 0 ? 'name' : _ref7$basis,\n          _ref7$user = _ref7.user,\n          user = _ref7$user === void 0 ? false : _ref7$user;\n\n      return new Promise(function (resolve) {\n        resolve(db.get(pathInit({\n          dbName: 'database',\n          path: \"$page.\".concat(vm.$route[basis]),\n          user: user,\n          validator: function validator() {\n            return false;\n          },\n          defaultValue: {}\n        })));\n      });\n    },\n\n    /**\n     * @description 快速将页面当前的数据 ( $data ) 持久化\n     * @param {Object} context context\n     * @param {Object} param vm {Object} vue\n     * @param {Object} param basis {String} 页面区分依据 [ name | path | fullPath ]\n     * @param {Object} param user {Boolean} 是否区分用户\n     */\n    pageSet: function pageSet(context, _ref8) {\n      var vm = _ref8.vm,\n          _ref8$basis = _ref8.basis,\n          basis = _ref8$basis === void 0 ? 'name' : _ref8$basis,\n          _ref8$user = _ref8.user,\n          user = _ref8$user === void 0 ? false : _ref8$user;\n      return new Promise(function (resolve) {\n        resolve(db.get(pathInit({\n          dbName: 'database',\n          path: \"$page.\".concat(vm.$route[basis], \".$data\"),\n          user: user,\n          validator: function validator() {\n            return false;\n          },\n          defaultValue: vm.$data\n        })));\n      });\n    },\n\n    /**\n     * @description 快速获取页面快速持久化的数据\n     * @param {Object} context context\n     * @param {Object} param vm {Object} vue\n     * @param {Object} param basis {String} 页面区分依据 [ name | path | fullPath ]\n     * @param {Object} param user {Boolean} 是否区分用户\n     */\n    pageGet: function pageGet(context, _ref9) {\n      var vm = _ref9.vm,\n          _ref9$basis = _ref9.basis,\n          basis = _ref9$basis === void 0 ? 'name' : _ref9$basis,\n          _ref9$user = _ref9.user,\n          user = _ref9$user === void 0 ? false : _ref9$user;\n      return new Promise(function (resolve) {\n        resolve(db.get(pathInit({\n          dbName: 'database',\n          path: \"$page.\".concat(vm.$route[basis], \".$data\"),\n          user: user,\n          defaultValue: vm.$data\n        })).value());\n      });\n    },\n\n    /**\n     * @description 清空页面快照\n     * @param {Object} context context\n     * @param {Object} param vm {Object} vue\n     * @param {Object} param basis {String} 页面区分依据 [ name | path | fullPath ]\n     * @param {Object} param user {Boolean} 是否区分用户\n     */\n    pageClear: function pageClear(context, _ref10) {\n      var vm = _ref10.vm,\n          _ref10$basis = _ref10.basis,\n          basis = _ref10$basis === void 0 ? 'name' : _ref10$basis,\n          _ref10$user = _ref10.user,\n          user = _ref10$user === void 0 ? false : _ref10$user;\n      return new Promise(function (resolve) {\n        resolve(db.get(pathInit({\n          dbName: 'database',\n          path: \"$page.\".concat(vm.$route[basis], \".$data\"),\n          user: user,\n          validator: function validator() {\n            return false;\n          },\n          defaultValue: {}\n        })));\n      });\n    }\n  }\n};",{"version":3,"sources":["/home/user1/桌面/vue/D2AdminICE-master/src/store/modules/d2admin/modules/db.js"],"names":["db","util","pathInit","dbName","path","user","validator","defaultValue","uuid","cookies","get","currentPath","value","undefined","set","write","namespaced","actions","context","Promise","resolve","database","databaseClear","databasePage","vm","basis","$route","databasePageClear","pageSet","$data","pageGet","pageClear"],"mappings":"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","sourcesContent":["import db from '@/libs/db.js'\nimport util from '@/libs/util.js'\n\n/**\n * @description 检查路径是否存在 不存在的话初始化\n * @param {Object} param dbName {String} 数据库名称\n * @param {Object} param path {String} 路径\n * @param {Object} param user {Boolean} 区分用户\n * @param {Object} param validator {Function} 数据校验钩子 返回 true 表示验证通过\n * @param {Object} param defaultValue {*} 初始化默认值\n * @returns {String} 可以直接使用的路径\n */\nfunction pathInit ({\n  dbName = 'database',\n  path = '',\n  user = true,\n  validator = () => true,\n  defaultValue = ''\n}) {\n  const uuid = util.cookies.get('uuid') || 'ghost-uuid'\n  const currentPath = `${dbName}.${user ? `user.${uuid}` : 'public'}${path ? `.${path}` : ''}`\n  const value = db.get(currentPath).value()\n  if (!(value !== undefined && validator(value))) {\n    db\n      .set(currentPath, defaultValue)\n      .write()\n  }\n  return currentPath\n}\n\nexport default {\n  namespaced: true,\n  actions: {\n    /**\n     * @description 将数据存储到指定位置 | 路径不存在会自动初始化\n     * @description 效果类似于取值 dbName.path = value\n     * @param {Object} param dbName {String} 数据库名称\n     * @param {Object} param path {String} 存储路径\n     * @param {Object} param value {*} 需要存储的值\n     * @param {Object} param user {Boolean} 是否区分用户\n     */\n    set (context, {\n      dbName = 'database',\n      path = '',\n      value = '',\n      user = false\n    }) {\n      db.set(pathInit({\n        dbName,\n        path,\n        user\n      }), value).write()\n    },\n    /**\n     * @description 获取数据\n     * @description 效果类似于取值 dbName.path || defaultValue\n     * @param {Object} param dbName {String} 数据库名称\n     * @param {Object} param path {String} 存储路径\n     * @param {Object} param defaultValue {*} 取值失败的默认值\n     * @param {Object} param user {Boolean} 是否区分用户\n     */\n    get (context, {\n      dbName = 'database',\n      path = '',\n      defaultValue = '',\n      user = false\n    }) {\n      return new Promise(resolve => {\n        resolve(db.get(pathInit({\n          dbName,\n          path,\n          user,\n          defaultValue\n        })).value())\n      })\n    },\n    /**\n     * @description 获取存储数据库对象\n     * @param {Object} context context\n     * @param {Object} param user {Boolean} 是否区分用户\n     */\n    database (context, {\n      user = false\n    } = {}) {\n      return new Promise(resolve => {\n        resolve(db.get(pathInit({\n          dbName: 'database',\n          path: '',\n          user,\n          defaultValue: {}\n        })))\n      })\n    },\n    /**\n     * @description 清空存储数据库对象\n     * @param {Object} context context\n     * @param {Object} param user {Boolean} 是否区分用户\n     */\n    databaseClear (context, {\n      user = false\n    } = {}) {\n      return new Promise(resolve => {\n        resolve(db.get(pathInit({\n          dbName: 'database',\n          path: '',\n          user,\n          validator: () => false,\n          defaultValue: {}\n        })))\n      })\n    },\n    /**\n     * @description 获取存储数据库对象 [ 区分页面 ]\n     * @param {Object} context context\n     * @param {Object} param vm {Object} vue\n     * @param {Object} param basis {String} 页面区分依据 [ name | path | fullPath ]\n     * @param {Object} param user {Boolean} 是否区分用户\n     */\n    databasePage (context, {\n      vm,\n      basis = 'name',\n      user = false\n    } = {}) {\n      return new Promise(resolve => {\n        resolve(db.get(pathInit({\n          dbName: 'database',\n          path: `$page.${vm.$route[basis]}`,\n          user,\n          defaultValue: {}\n        })))\n      })\n    },\n    /**\n     * @description 清空存储数据库对象 [ 区分页面 ]\n     * @param {Object} context context\n     * @param {Object} param vm {Object} vue\n     * @param {Object} param basis {String} 页面区分依据 [ name | path | fullPath ]\n     * @param {Object} param user {Boolean} 是否区分用户\n     */\n    databasePageClear (context, {\n      vm,\n      basis = 'name',\n      user = false\n    } = {}) {\n      return new Promise(resolve => {\n        resolve(db.get(pathInit({\n          dbName: 'database',\n          path: `$page.${vm.$route[basis]}`,\n          user,\n          validator: () => false,\n          defaultValue: {}\n        })))\n      })\n    },\n    /**\n     * @description 快速将页面当前的数据 ( $data ) 持久化\n     * @param {Object} context context\n     * @param {Object} param vm {Object} vue\n     * @param {Object} param basis {String} 页面区分依据 [ name | path | fullPath ]\n     * @param {Object} param user {Boolean} 是否区分用户\n     */\n    pageSet (context, {\n      vm,\n      basis = 'name',\n      user = false\n    }) {\n      return new Promise(resolve => {\n        resolve(db.get(pathInit({\n          dbName: 'database',\n          path: `$page.${vm.$route[basis]}.$data`,\n          user,\n          validator: () => false,\n          defaultValue: vm.$data\n        })))\n      })\n    },\n    /**\n     * @description 快速获取页面快速持久化的数据\n     * @param {Object} context context\n     * @param {Object} param vm {Object} vue\n     * @param {Object} param basis {String} 页面区分依据 [ name | path | fullPath ]\n     * @param {Object} param user {Boolean} 是否区分用户\n     */\n    pageGet (context, {\n      vm,\n      basis = 'name',\n      user = false\n    }) {\n      return new Promise(resolve => {\n        resolve(db.get(pathInit({\n          dbName: 'database',\n          path: `$page.${vm.$route[basis]}.$data`,\n          user,\n          defaultValue: vm.$data\n        })).value())\n      })\n    },\n    /**\n     * @description 清空页面快照\n     * @param {Object} context context\n     * @param {Object} param vm {Object} vue\n     * @param {Object} param basis {String} 页面区分依据 [ name | path | fullPath ]\n     * @param {Object} param user {Boolean} 是否区分用户\n     */\n    pageClear (context, {\n      vm,\n      basis = 'name',\n      user = false\n    }) {\n      return new Promise(resolve => {\n        resolve(db.get(pathInit({\n          dbName: 'database',\n          path: `$page.${vm.$route[basis]}.$data`,\n          user,\n          validator: () => false,\n          defaultValue: {}\n        })))\n      })\n    }\n  }\n}\n"]}]}